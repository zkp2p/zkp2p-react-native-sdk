// The Android Gradle Plugin builds the native code with the Android NDK.

group = "com.zkp2preactnativesdk"
version = "0.1.0"

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["Zkp2pReactNativeSdk_kotlinVersion"]

  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['Zkp2pReactNativeSdk_' + name]
  }

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath("com.android.tools.build:gradle:7.3.0")
    // noinspection DifferentKotlinGradleVersion
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Zkp2pReactNativeSdk_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Zkp2pReactNativeSdk_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.zkp2preactnativesdk"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    
    ndk {
      abiFilters "arm64-v8a", "x86_64"
    }
    
    externalNativeBuild {
      ndkBuild {
        arguments "NDK_DEBUG=1"
      }
    }
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin project with NewArch enabled
          "${project.buildDir}/generated/source/codegen/java"
        ]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }
  
  externalNativeBuild {
    ndkBuild {
      path "src/main/jni/Android.mk"
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
}

// NOTE: Circuit files need to be copied to the app's assets, not the library's assets
// This task is for development/testing purposes only
// Apps using this library should copy the gnark-circuits files to their own assets
task copyGnarkCircuits(type: Copy) {
  from file("${project.rootDir}/../gnark-circuits")
  into file("${projectDir}/src/main/assets/gnark-circuits")
  include "pk.*", "r1cs.*"
  doFirst {
    println "Copying gnark-circuits from ${project.rootDir}/../gnark-circuits to ${projectDir}/src/main/assets/gnark-circuits"
    println "Source exists: ${file("${project.rootDir}/../gnark-circuits").exists()}"
    println "Source files: ${file("${project.rootDir}/../gnark-circuits").listFiles()?.collect { it.name }}"
  }
  doLast {
    println "Copied files:"
    fileTree("${projectDir}/src/main/assets/gnark-circuits").each { file ->
      println "  - ${file.name}"
    }
  }
}

// Ensure the assets directory exists
task createAssetsDir {
  doLast {
    file("src/main/assets/gnark-circuits").mkdirs()
  }
}

copyGnarkCircuits.dependsOn createAssetsDir
preBuild.dependsOn copyGnarkCircuits

// Clean circuit files on clean
clean.doFirst {
  delete "src/main/assets/gnark-circuits"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "Zkp2pReactNativeSdk"
    codegenJavaPackageName = "com.zkp2preactnativesdk"
  }
}
